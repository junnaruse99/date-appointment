{"version":3,"sources":["components/Form.js","components/Appointment.js","App.js","reportWebVitals.js","index.js"],"names":["Form","creatAppointment","useState","pet","owner","date","time","symptoms","dateAppointment","setDateAppointment","error","updateError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","rows","Appointment","appointment","deleteAppointment","onClick","propTypes","PropTypes","func","isRequired","App","initialAppointments","JSON","parse","localStorage","getItem","appointments","setAppointments","useEffect","setItem","stringify","newAppointment","filter","title","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b6fd560.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport uuid from 'uuid/dist/v4';\n\nconst Form = ({ creatAppointment }) => {\n\n    const [ dateAppointment, setDateAppointment ] = useState({\n        pet: '',\n        owner: '',\n        date: '',\n        time: '',\n        symptoms: ''\n    });\n\n    const [ error, updateError ] = useState(false);\n\n\n    const handleChange = e => {\n        setDateAppointment({\n            ...dateAppointment,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const { pet, owner, date, time, symptoms } = dateAppointment;\n\n    const submitAppointment = e => {\n        e.preventDefault();\n\n        // Validate\n        if(pet.trim() === '' || owner.trim() === '' || date.trim() === '' || time.trim() === '' || symptoms.trim() === '') {\n            updateError(true);\n            return;\n        }\n\n        // Remove the error messagge\n        updateError(false);\n\n        // Assign an id\n        dateAppointment.id = uuid();\n\n        // Create an Appointment\n        creatAppointment(dateAppointment);\n\n        // Restart form\n        setDateAppointment({\n            pet: '',\n            owner: '',\n            date: '',\n            time: '',\n            symptoms: ''\n        })\n    }\n\n    return ( \n        <>\n        <h2>Create an appointment</h2>\n\n        { error ? <p className=\"alerta-error\">All fields are required</p> : null}\n\n        <form onSubmit={submitAppointment}>\n            <div className=\"form-group\">\n                <label>Name of pet</label>\n                <input\n                    type=\"text\"\n                    name=\"pet\"\n                    placeholder=\"Name of Pet\"\n                    className=\"form-control\"\n                    onChange={handleChange}\n                    value={pet}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label>Name of owner</label>\n                <input\n                    type=\"text\"\n                    name=\"owner\"\n                    placeholder=\"Name of owner\"\n                    className=\"form-control\"\n                    onChange={handleChange}\n                    value={owner}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label>Date</label>\n                <input\n                    type=\"date\"\n                    name=\"date\"\n                    className=\"form-control\"\n                    onChange={handleChange}\n                    value={date}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label>Time</label>\n                <input\n                    type=\"time\"\n                    name=\"time\"\n                    className=\"form-control\"\n                    onChange={handleChange}\n                    value={time}\n                />\n            </div>\n            <div className=\"form-group\">\n                <label>Symptoms</label>\n                <textarea\n                    className=\"form-control\"\n                    name=\"symptoms\"\n                    rows=\"5\"\n                    onChange={handleChange}\n                    value={symptoms}\n                ></textarea>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary form-control\">Submit Appointment</button>\n        </form>\n        </>\n     );\n}\n \nexport default Form;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Appointment = ({ appointment, deleteAppointment }) => (\n    <div className=\"cita\">\n        <p>Pet: <span>{appointment.pet}</span> </p>\n        <p>Owner: <span>{appointment.owner}</span> </p>\n        <p>Date: <span>{appointment.date}</span> </p>\n        <p>Time: <span>{appointment.time}</span> </p>\n        <p>Symptoms: <span>{appointment.symptoms}</span> </p>\n\n        <button\n            className=\"btn btn-block button eliminar\"\n            onClick={() => deleteAppointment(appointment.id)}\n        >Delete &times;</button>\n    </div>\n);\n\nAppointment.propTypes = {\n    appointment: PropTypes.object.isRequired,\n    deleteAppointment: PropTypes.func.isRequired\n}\nexport default Appointment;","import React, { useState, useEffect } from 'react';\nimport Form from './components/Form';\nimport Appointment from './components/Appointment';\nimport PropTypes from 'prop-types';\n\nfunction App() {\n\n  // Appointment in local storage\n  let initialAppointments = JSON.parse(localStorage.getItem('appointments'));\n  if(!initialAppointments) {\n    initialAppointments = [];\n  }\n\n  // Array of appointments\n  const [ appointments, setAppointments ] = useState(initialAppointments);\n\n  // Use effect for run functions when there is a state change\n  useEffect( () => {\n    localStorage.setItem('appointments', JSON.stringify(appointments));\n  }, [appointments] );\n  // Inside array is the element to look for in case of state change\n\n  // Function that take actual appointment and add it\n  const creatAppointment = appointment => {\n    setAppointments([...appointments, appointment]);\n  }\n\n  // Function that deletes an appointment\n  const deleteAppointment = id => {\n    const newAppointment = appointments.filter(appointment => appointment.id !== id);\n    setAppointments(newAppointment);\n  }\n\n  // Conditional message, when there are no appointments\n  const title = appointments.length === 0 ? 'There are no appointments' : 'Manage your appointments';\n\n  return (\n    <>\n      <h1>Owner's manager</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 col-md-6\">\n            <Form creatAppointment={creatAppointment}/>\n          </div>\n          <div className=\"col-12 col-md-6\">\n            <h2>{title}</h2>\n            {appointments.map(appointment => (\n              <Appointment\n                key={appointment.id}\n                appointment={appointment}\n                deleteAppointment={deleteAppointment}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nForm.propTypes = {\n  creatAppointment: PropTypes.func.isRequired\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}